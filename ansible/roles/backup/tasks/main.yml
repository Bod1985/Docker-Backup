---
- block:
  
  - name: Check sudoers exists
    stat:
      path: "/etc/sudoers"
    register: etc_sudoers

  - name: Set sudo group to NOPASSWD
    lineinfile:
      path: "/etc/sudoers"
      regexp: '^%sudo\s'
      line: '%sudo   ALL=(ALL) NOPASSWD:ALL'
      state: present
    when: etc_sudoers.stat.exists
  
  - name: Backup | Set default variables
    set_fact:
      backup_opt_path: "/opt/"

  - name: Set 'backup_excludes_list_path' variable
    set_fact:
      backup_excludes_list_path: "{{
        (playbook_dir + '/backup_excludes_list.txt')
        if ((backup_excludes_list is defined) and (backup_excludes_list.stat.exists))
        else (playbook_dir + '/roles/backup/files/backup_excludes_list.txt') }}"

  # Stop Containers

  - name: "Gather list of running Docker containers"
    shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' | xargs echo -n"
    register: docker_containers
    ignore_errors: yes

  - name: Set 'docker_containers' variable
    set_fact:
      docker_containers: "{{ docker_containers.stdout if (docker_containers is success) else '' }}"

  - name: Docker container tasks
    block:

    - name: Convert Docker containers string into a list
      set_fact:
        docker_containers: "{{ (docker_containers).split() | sort }}"

    - name: Create lists of ignored apps
      set_fact:
        ignored_apps:
          - portainer

    - name: Filter out ignored apps from Docker containers list
      set_fact:
        docker_containers: "{{ docker_containers | difference(ignored_apps) }}"

    - name: Convert Docker containers list back to string
      set_fact:
        docker_containers: "{{ docker_containers | join(' ') }}"

    - name: "Stop all running Docker containers"
      shell: "docker stop {{ docker_containers }}"
      ignore_errors: yes


    when: (docker_containers | trim | length > 0)

  - name: "Get list of all folders in '{{ backup_opt_path }}'"
    find:
      paths: "{{ backup_opt_path }}"
      recurse: no
      file_type: directory
    register: opt_folders_temp

  - name: Create 'opt_folders' variable
    set_fact:
      opt_folders: []

  - name: Add folder list to 'opt_folders' variable
    set_fact:
      opt_folders: "{{ opt_folders }} + [ '{{ item.path }}' ]"
    with_items: "{{ opt_folders_temp.files }}"
    loop_control:
      label: "{{ item.path }}"

  - name: "Archiving '{{ backup_opt_path }}' folders into '{{ local.destination }}/'"
    shell: |
      tar \
        --ignore-failed-read \
        --warning=no-file-changed \
        --warning=no-file-removed \
        --exclude='./snapshots' \
        --exclude-from '{{ backup_excludes_list_path }}' \
        -cf '{{ local.destination }}/opt/{{ item | basename }}.tar' -C '{{ item | dirname }}' './{{ item | basename }}'
    args:
      executable: /bin/bash
      warn: no
    with_items: "{{ opt_folders }}"
    loop_control:
      label: "'{{ item }}' --> '{{ local.destination }}/opt/{{ item | basename }}.tar'"

  - name: Check if tarball files were created
    find:
      paths: "{{ local.destination }}/opt/"
      file_type: file
      patterns: '*.tar'
    register: dir_files2

  - name: Abort backup when the creation of tarball files fails
    fail:
      msg: "There must have been an issue during the tarball creation tasks as they are missing in '{{ local.destination }}/opt/'"
    when: (dir_files2.matched|int == 0)
  # Start Docker containers

  - name: Start Docker Containers
    block:
    
    - name: "Wait for 30 seconds before starting Docker containers"
      wait_for:
        timeout: 30

    - name: "Start all previously running Docker containers"
      shell: 'docker start {{ docker_containers }}'
      ignore_errors: yes
      when: (docker_containers | trim | length > 0)

  - name: Get Current Time
    shell: "date \"+%s\""
    register: end_time_lookup
    
  - name: Backup Status - Success
    debug:
      msg: "Backup: Finished Docker backup task in {{ total_time }} minutes."

  - name: Start Docker Containers
    block:

    - name: "Start all previously running Docker containers"
      shell: 'docker start {{ docker_containers }}'
      ignore_errors: yes
      when: (docker_containers | trim | length > 0)
